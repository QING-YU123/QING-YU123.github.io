[{"content":"在此处进行详细的学习，并且验证和修复以及拓展先前建立的结构\n详细的学习笔记（逻辑，结构，技术） 基本的知识验证实践 本阶段主要以书籍（文档）学习为主，按照在预习阶段得到的学习模式进行，并且对其进行修正 以验证完全，提交三项笔记为结束点\n#\r设计模式单解\r#\r策略模式\r动机：策略模式是使用里氏替换来替换ifelse结构，达到对ifelse可拓展的需求 原则：对ifelse进行拓展 package designmodel; /** * @author 73214 */ /** * 静态部分 */ public class Strategy { public static void main(String[] args) { new PaymentService(new taoBaoPayment(), 100); new PaymentService(new weiXinPayment(), 1000); } } interface PaymentStrategy { public void payment(int money); } class PaymentService { public PaymentService(PaymentStrategy paymentStrategy, int money) { paymentStrategy.payment(money); } } /** * 动态 */ class taoBaoPayment implements PaymentStrategy { @Override public void payment(int money) { System.out.println(\u0026#34;Taobao\u0026#34; + money); } } class weiXinPayment implements PaymentStrategy { @Override public void payment(int money) { System.out.println(\u0026#34;WeiXin\u0026#34; + money); } } #\r简单工厂模式（不使用）\r简单工厂模式的架构基本上和策略模式是一样的，不同的是，承担接口的类传入的是字符串，而返回的是对象。\n#\r工厂模式\r工厂模式是由简单工厂模式+策略模式形成的 动机：工厂生产产品，通过调用方法将new这个强依赖去除，并且将创建对象这个行为运行时实现，将这个过程延后处理了，这实现了解耦。工厂同时还是最适合被写为单例模式的类 原则：接口设计原则，依赖倒置原则 package designmodel; /** * @author 73214 */ public class TemplateFactory extends TemplateF { @Override void run() { AF.getFactory().play(); BF.getFactory().play(); } } interface GameProduct { void play(); } interface GameFactory { GameProduct getFactory(); } // 动态 abstract class TemplateF { GameFactory AF = new GameAFactory(); GameFactory BF = new GameBFactory(); abstract void run(); } class GameAProduct implements GameProduct { @Override public void play() { System.out.println(\u0026#34;AGame\u0026#34;); } } class GameBProduct implements GameProduct { @Override public void play() { System.out.println(\u0026#34;BGame\u0026#34;); } } class GameAFactory implements GameFactory { @Override public GameProduct getFactory() { return new GameAProduct(); } } class GameBFactory implements GameFactory { @Override public GameProduct getFactory() { return new GameBProduct(); } } #\r单例模式\r动机：许多东西之需要有一个就可以了，比方说工厂，所以为了让每一次使用get接口都能取到同一个对象，就可以使用单例模式 原则：单例模式只能被一次初始化 实现\n私有的构造函数（无法被使用） 通过静态函数调用构造函数给静态的变量初始化 package designmodel; /** * @author 73214 */ public class Singleton { public static void main(String[] args) { } } class LazySingleton { private static LazySingleton singleton; private LazySingleton() { } public static LazySingleton getSingleton() { if (singleton == null) { singleton = new LazySingleton(); } return singleton; } } #\r原型模式\r动机：完全对对象的复制，而非是从类中进行实例化 原则：功能化较强的设计模式，主要是在有类似功能的时候使用。 在Java中继承Cloneable接口并实现clone方法即可。\npackage designmodel; /** * @author 73214 */ public class Singleton { public static void main(String[] args) throws CloneNotSupportedException { A a = new A(); a.setA(90); A b = (A) a.clone(); System.out.println(b.getA()); } } class A implements Cloneable { int a = 9; public int getA() { return a; } public void setA(int a) { this.a = a; } @Override protected Object clone() throws CloneNotSupportedException { return super.clone(); } } #\r享元模式\r动机：许多对象是可以共享的，而创建新的对象则不能算是值得的，所以在使用类的时候，如果是用工厂模式做的，那么遵守一样的接口法则，就可以使用享元模式来控制对象的数量 原则：一定有一个识别码可以识别对象是否创建，享元模式的关键在于对对象的管理，对象的特征将会决定享元工厂的写法。享元工厂一定是能够判断对象是否创建的。\npackage designmodel; import java.util.HashMap; public class FlyWeight { public static void main(String[] args) { FWBookFactory fwBookFactory = FWBookFactory.getFWBookFactory(); FWBook b1 = fwBookFactory.getBook(\u0026#34;Hello\u0026#34;); FWBook b2 = fwBookFactory.getBook(\u0026#34;Hello\u0026#34;); FWBook b3 = fwBookFactory.getBook(\u0026#34;world\u0026#34;); System.out.println(b1); System.out.println(b2); System.out.println(b3); } } interface FWBook { String getBookName(); } class ABook implements FWBook { private String bookName; public ABook(String bookName) { this.bookName = bookName; } @Override public String getBookName() { return bookName; } } class FWBookFactory { private HashMap\u0026lt;String, FWBook\u0026gt; fWBookList = new HashMap\u0026lt;\u0026gt;(); private static FWBookFactory fwBookFactory; private FWBookFactory() { } static FWBookFactory getFWBookFactory() { if (fwBookFactory == null) { fwBookFactory = new FWBookFactory(); } return fwBookFactory; } public FWBook getBook(String name) { FWBook order = null; if (fWBookList.containsKey(name)) { order = fWBookList.get(name); } else { fWBookList.put(name, new ABook(name)); order = fWBookList.get(name); } return order; } } #\r状态模式\r动机：若要保存某个角色的一组状态，使得其处于不同状态时候展现不同的行为，应该如何去做？通常情况下，可以使用一个字符串保存状态的代码，然后进行ifelse判断，但是这样子增加了代码耦合度，且不利于进行扩展，如何使用接口将ifelse切换掉呢？ 原则：状态模式使用一个Context类来将状态保存，在需要使用的时候进行使用，单个状态对象可以设置成单例，也可以为多个对象进行复用，可以成为别的实体对象的一部分。 写法：一切状态由Context进行管理，所有的行为在这个地方进行释放。 package designmodel; /** * @author 73214 */ public class Statement { public static void main(String[] args) { LogisticsContext logisticsContext = LogisticsContext.getLogisticsContext(); logisticsContext.setLogisticsSt(new LogisticsStStart()); logisticsContext.doAction(); logisticsContext.setLogisticsSt(new LogisticsStUsing()); logisticsContext.doAction(); logisticsContext.setLogisticsSt(new LogisticsSt() { @Override public void doAction() { System.out.println(\u0026#34;Hello\u0026#34;); } }); logisticsContext.doAction(); } } interface LogisticsSt { void doAction(); } class LogisticsContext { private static LogisticsContext logisticsContext; private LogisticsContext() { } public static LogisticsContext getLogisticsContext() { if (logisticsContext == null) { logisticsContext = new LogisticsContext(); } return logisticsContext; } private LogisticsSt logisticsSt; public LogisticsSt getLogisticsSt() { return logisticsSt; } public void setLogisticsSt(LogisticsSt logisticsSt) { this.logisticsSt = logisticsSt; } public void doAction() { logisticsSt.doAction(); } } // dynamic class LogisticsStStart implements LogisticsSt { @Override public void doAction() { System.out.println(\u0026#34;Start\u0026#34;); } } class LogisticsStUsing implements LogisticsSt { @Override public void doAction() { System.out.println(\u0026#34;Doing\u0026#34;); } } class LogisticsStEnding implements LogisticsSt { @Override public void doAction() { System.out.println(\u0026#34;Ending\u0026#34;); } } #\r组合模式\r动机：组合模式是一个用于管理有层级的对象管理内容，特别是文件夹的设定，文件夹中可以放新的文件夹，同时也可以放入文件。 原则：层级结构的对象管理 结构：只有一个类，自反的\npackage designmodel; import java.util.Vector; public class Composite { public static void main(String[] args) { TeammateCp teammateCpA = new TeammateACp(); TeammateCp teammateCpB = new TeammateBCp(); TeammateCp teammateCp = new TeammateBs(); teammateCp.add(teammateCpA); teammateCp.add(teammateCpB); } } abstract class TeammateCp { Vector\u0026lt;TeammateCp\u0026gt; teammateCpVector; abstract void attack(); public Vector\u0026lt;TeammateCp\u0026gt; getTeammateCpVector() { return teammateCpVector; } public void setTeammateCpVector(Vector\u0026lt;TeammateCp\u0026gt; teammateCpVector) { this.teammateCpVector = teammateCpVector; } public void add(TeammateCp teammateCp) { teammateCpVector.add(teammateCp); } public void remove(TeammateCp teammateCp) { teammateCpVector.remove(teammateCp); } } // dynamic class TeammateBs extends TeammateCp { @Override void attack() { } } class TeammateACp extends TeammateCp { @Override void attack() { System.out.println(\u0026#34;A发出了攻击\u0026#34;); } } class TeammateBCp extends TeammateCp { @Override void attack() { System.out.println(\u0026#34;B发出了攻击\u0026#34;); } } #\r建造者模式（构建模式）\r动机：链式调用，函数科里化的亲兄弟。 原则：多参数，可选参数函数。 结构：下面提供了两种实现链式调用的实现方法。同时还有函数科里化的实现版本。\npackage designmodel; import java.util.function.Function; public class Builder { public static void main(String[] args) { Computer computer = new Computer.Builder(\u0026#34;AMD\u0026#34;, \u0026#34;宏基\u0026#34;).setGPU(\u0026#34;AMD\u0026#34;) .setYear(2021) .build(); computer.attack() .doAction(); computer.using(\u0026#34;hello\u0026#34;) .apply(\u0026#34;world\u0026#34;); } } class Computer { int year; String CPU; String GPU; String name; Computer(Builder builder) { year = builder.year; CPU = builder.CPU; GPU = builder.GPU; name = builder.name; } public static class Builder { int year; String CPU; String GPU; String name; Builder(String CPU, String name) { this.CPU = CPU; this.name = name; } public Builder setGPU(String GPU) { this.GPU = GPU; return this; } public Builder setYear(int year) { this.year = year; return this; } public Computer build() { return new Computer(this); } } public Computer attack() { System.out.println(\u0026#34;Attack\u0026#34;); System.out.println(\u0026#34;\u0026#34;); return this; } public Function\u0026lt;String, Computer\u0026gt; using(String name) { System.out.println(name); return (String fName) -\u0026gt; { System.out.println(fName); return this; }; } public Computer doAction() { System.out.println(\u0026#34;GO\u0026#34;); return this; } } #\r装饰模式\r动机：继承是强耦合，如果要为原有的类进行功能拓展，就可以使用装饰模式进行，这样子继承变成了依赖，降低了耦合度。 原则：原有代码不动，首先增加一个容器，其拥有相同的接口和其对象本身，然后再通过继承这个接口并对方法进行重写\npackage designmodel; public class Decorator { public static void main(String[] args) { Shape redCircle = new RedCircleDirector(new Circle()); redCircle.draw(); } } interface Shape { void draw(); } class Circle implements Shape { @Override public void draw() { System.out.println(\u0026#34;Circle\u0026#34;); } } /** * dynamic to change the instance\u0026#39;s method. * add attribute to make the instance more useful */ abstract class ShapeDecorator implements Shape { protected Shape decoratedShape; public ShapeDecorator(Shape decoratedShape) { this.decoratedShape = decoratedShape; } @Override public void draw() { decoratedShape.draw(); } } class RedCircleDirector extends ShapeDecorator { public RedCircleDirector(Shape decoratedShape) { super(decoratedShape); } @Override public void draw() { super.decoratedShape.draw(); System.out.println(\u0026#34;red\u0026#34;); } } #\r代理模式\r动机：和装饰模式作用基本一致，但是装饰模式是在知道原有的方法的时候进行增强，比方说原有的是画一个圆形，而使用装饰模式可以使其为红色。而代理模式则是无须管理这些实现的，比方说我要加一个日志，这个时候就可以使用代理模式。\npackage designmodel; public class Proxy { public static void main(String[] args) { log logTest = new logTime(new logout()); logTest.logMsg(\u0026#34;hello\u0026#34;); } } interface log { void logMsg(String msg); } class logout implements log { @Override public void logMsg(String msg) { System.out.println(msg); } } class logTime implements log { // 这里是被代理的对象 log logout = new logout(); logTime(log logout) { this.logout = logout; } @Override public void logMsg(String msg) { logout.logMsg(msg); System.out.println(\u0026#34;2023/7/13\u0026#34;); } } #\r适配器模式\r动机：为了解决不同的接口的适配问题，可以写一个类实现给予一部分接口实现，并将需要实现的方法传递下去，以此解决接口不适配的问题。 动机：只需要实现一部分类即可，无论使用什么方法，但是要保证，这个适配器一定要继承或者实现原有的接口，保证原有的结构不会被改变。\npackage designmodel; public class Adapt { static void getLog(LogFactory log) { log.getStart(); log.getUsing(); log.getEnding(); } public static void main(String[] args) { getLog(new LogAdapter() { @Override public void getStart() { System.out.println(\u0026#34;Hello world\u0026#34;); } }); } } interface LogFactory { void getStart(); void getUsing(); void getEnding(); } /** * dynamic change to make the interface\u0026#39;s parameters different * Add a adapt to make this achieve */ abstract class LogAdapter implements LogFactory { @Override public void getEnding() { } @Override public void getUsing() { } } #\r命令模式\r#\r观察者模式\r动机：当有一些对象的动态变化需要让某些对象知道并进行及时反馈的时候，就需要使用观察者模式 原则：Event发生变化的时候需要告知他需要告知的类，所以Event会维护一个实现了update接口的类的数组，在需要告知的时候去调用update方法。 package designmodel; import java.util.Vector; /** * @author 73214 */ public class Event { public static void main(String[] args) { ObserverConcrete observerConcrete = new ObserverConcrete(); EventConcrete eventConcrete = new EventConcrete(); eventConcrete.add(observerConcrete); eventConcrete.doSth(); } } interface SubjectEvent { void add(ObserverListener observerListener); void remove(ObserverListener observerListener); void notice(); } interface ObserverListener { void update(); } class EventConcrete implements SubjectEvent { Vector\u0026lt;ObserverListener\u0026gt; observerListeners = new Vector\u0026lt;\u0026gt;(); @Override public void add(ObserverListener observerListener) { observerListeners.add(observerListener); } @Override public void remove(ObserverListener observerListener) { observerListeners.remove(observerListener); } @Override public void notice() { for (ObserverListener item : observerListeners) { item.update(); } } public void doSth() { notice(); } } class ObserverConcrete implements ObserverListener { @Override public void update() { System.out.println(\u0026#34;我曹\u0026#34;); } } #\r责任链模式\r动机：有些类在设计上在某些行为上有权能的设计，经由条件判断，如果其无法去执行这个类的接口，则会将责任转嫁到别的类当中去。 原则：在类中存储下一个执行的对象，当该对象不具有处理该行为的能力的时候，将该操作转交给责任链的下一个对象类型进行处理\npackage org.example; interface Money { void getMoney(int money); } /** * @author 73214 */ public class Handler { public static void main(String[] args) { new Worker(new Manager()).getMoney(1200); new Worker(new Manager()).getMoney(190); } } class Worker implements Money { private Money money; public Worker(Money money) { this.money = money; } @Override public void getMoney(int money) { int workerMoney = 1000; if (money \u0026gt; workerMoney) { this.money.getMoney(money); } else { System.out.println(\u0026#34;Worker 给了钱\u0026#34;); } } } class Manager implements Money { @Override public void getMoney(int money) { System.out.println(\u0026#34;Manager 给了钱\u0026#34;); } } #\r设计模式使用群\r#\r模板与工厂使用群\r本逻辑包括工厂系+模板+策略模式\n#\r事件系统Event\r","date":"2023-08-03T17:53:06+08:00","image":"https://source.unsplash.com/800x600/?example","permalink":"http://localhost:1313/post/design-model/%E5%AD%A6%E4%B9%A0%E9%AA%8C%E8%AF%81/","title":"设计模式"},{"content":"\r#\rHello\r","date":"2023-08-03T16:53:06+08:00","permalink":"http://localhost:1313/post/first-post/01/","title":"01"}]